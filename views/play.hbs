<script src="/js/chess.js"></script>
<div class="container-fluid">
	<div class="row" style="height: 100%">
		<div style="background-color: rgba(40, 50, 78);height: 100%;" class="col-md-1">
			<ul id="sidebar-ul">
				<li id="sidebar-li-app" class="sidebar-li">
				<img src="https://lichess1.org/assets/images/learn/brutal-helm.svg">
				CB
				</li>
				<li id="castle-btn" class="sidebar-li"><img src="https://lichess1.org/assets/images/learn/castle.svg">
					Castle
				</li>
				<!-- <li id="creategame-btn" class="sidebar-li"><img src="https://lichess1.org/assets/images/learn/battle-gear.svg">Create
				</li>
				<li id="joingame-btn" class="sidebar-li"><img src="https://lichess1.org/assets/images/learn/guards.svg">Join</li> -->
				<li id="logout-btn" class="sidebar-li"><img src="https://lichess1.org/assets/images/learn/winged-sword.svg">Logout</li>
			</ul>
		</div>
		<div id="chessboard-div" class="col-md-7">
			<div style="height: 100%" class="row">
				<div class="col-md-9">
					<div id="board1">
            		</div>
				</div>
				<div id="timer" class="col-md-3">
					<ul>
						<li>

							Magnus<br>
							<span class="label label-info">
								<i class="fa fa-clock-o" aria-hidden="true"></i>
								05:00
							</span>
						</li>
						<li style="padding-bottom: 10px">
							<span class="label label-warning">
							<i class="fa fa-handshake-o" aria-hidden="true"></i>
							Offer Draw
							</span><br>
							<!-- <img src="img/clock.png" height="128px" width="128px"/> -->
							<!-- <img height="128px" width="128px" src="https://lichess1.org/assets/images/learn/spinning-blades.svg"> -->
							</li>
							<li>
							<span class="label label-danger">
							<i class="fa fa-ravelry" aria-hidden="true"></i>
							Resign
							</span><br>
						</li>
						<li style="padding-bottom: 0">
							<span class="label label-info">
								<i class="fa fa-clock-o" aria-hidden="true"></i>
								04:59
							</span><br>
						{{userDetails.username}}
						</li>
					</ul>
				</div>
			</div>
            
		</div>
		<div id="chessWrapper" class="col-md-4">
			<div id="profile-header" class="row">
		<!-- 	<div class="col-md-1">
			</div> -->

			<div id="heading" class="col-md-12">
				<i  class="fa fa-toggle-off fa" aria-hidden="true"></i>
				PROFILE
			</div>
		</div>

		<div id="profile-info" class="row">
			<div class="col-md-12">
				<div id="profile-info-overlay" class="row">
					<div class="col-md-12">
						<div id="profile-pic-wrapper" class="row">
							<div class="col-md-12">
								<img id="user-pic" class="img-circle" src="/img/crown(2).png">
							</div>
						</div>
						<div id="user-name-wrapper" class="row">
							<div class="col-md-12">
								<span id="user-name">
									{{userDetails.username}}
								</h2>
							</div>
						</div>
						<div id="user-category-wrapper" class="row">
							<div class="col-md-12">
								<button class="btn rounded-circle">
									1st Category
								</button>
							</div>
						</div>
						<div id="total-games-wrapper" class="row">
							<div class="col-md-12">
								<h4>
									{{userGameDetails.totalGames}} GAMES
								</h2>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div id="profile-mini-stats" class="row">
			<div class="col-md-4">
				<span style="font-family: sans-serif;font-weight: bold;color: #FE7C60;"> WON</span> 
				{{userGameDetails.wins}}
			</div>
			<div class="col-md-4">
				<span style="font-family: sans-serif;font-weight: bold;color: #F8C82D;">LOST</span> 
				{{userGameDetails.losses}}
			</div>
			<div class="col-md-4">
				<span style="font-family: sans-serif;font-weight: bold;color: #0DCCC0;">DRAW</span>
				 {{userGameDetails.draws}}
			</div>
		</div>

		<div id="chat-div" class="row">
		</div>
		</div>
	</div>
</div>
<script src="/socket.io/socket.io.js"></script>
<script src="/js/chessboard-0.3.0.js"></script>
<script src="/js/timer.js"></script>
<script type="text/javascript">
// board defaults to the starting position when called with no parameters
var game = new Chess();
var chance = "white";
var chessTimer = new Timer();
var chessTime = 5 * 60 ; //5 minutes

// do not pick up pieces if the game is over
// only pick up pieces for the side to move
var onDragStart = function(source, piece, position, orientation) {
  if (game.game_over() === true ||
      (game.turn() === 'w' && piece.search(/^b/) !== -1) ||
      (game.turn() === 'b' && piece.search(/^w/) !== -1)) {
    return false;
  }
};

var onDrop = function(source, target) {
  // see if the move is legal
  if(chance == "{{playas}}")
  {
      var move = game.move({
      from: source,
      to: target,
      promotion: 'q' // NOTE: always promote to a queen for example simplicity
    });

    // illegal move
    if (move === null) return 'snapback';

    console.log(source + " " + target);
    var unique_key = "{{id}}";
    console.log("indexx.hbs: " + unique_key);
    socket.emit('sendmove',source, target, unique_key);
    var currplayer = "{{playas}}";

    //start timer for counter player and stop counter for current player
    // socket.emit
    var nectplayer;
    if(currplayer == "white")
    {
      nextplayer = "black";
    }
    else
    {
      nextplayer = "white";
    }
    socket.emit('whosechance', nextplayer, unique_key);

  }
  else
  {
    return'snapback';
  }
  
  
  //updateStatus();
};

// update the board position after the piece snap 
// for castling, en passant, pawn promotion
var onSnapEnd = function() {
  board.position(game.fen());
};

var x = "{{playas}}";

console.log(x);
var cfg = {
  orientation: x,
  draggable: true,
  position: 'start',
  onDragStart: onDragStart,
  onDrop: onDrop,
  onSnapEnd: onSnapEnd
};

//initializing ChessBoard
board = ChessBoard('board1', cfg);
</script>
<script>
var socket = io();

//on connection to server ask for user's name with an anonymous callback
var color = "{{playas}}";
var key = "{{id}}"

socket.on('connect',function(){
  console.log('client successfully connected index');
  if(color == "white")
  {
	chessTimer.start(chessTime);
	socket.emit('create', key);
  }
    
  else
  {
    socket.emit('join', key);
  }
});

socket.on('updatechat',function(user, data){
  console.log('updating chat');
  console.log(data);
});

socket.on('flipchance', function(currplayer){
  chance = currplayer;
});


socket.on('updateboard',function(source, target){
  //console.log(user);
  console.log("target : " + target);
  console.log("source : " + source);

  board.move(source + '-' + target);

  var move = game.move({
  from: source,
  to: target,
  promotion: 'q' // NOTE: always promote to a queen for example simplicity
});
  
  updateStatus();

  function updateStatus() {
      var status = '';

      var moveColor = 'White';
      if (game.turn() === 'b') {
        moveColor = 'Black';
      }

      // checkmate?
      if (game.in_checkmate() === true) {
        status = 'Game over, ' + moveColor + ' is in checkmate.';
      }

      // draw?
      else if (game.in_draw() === true) {
        status = 'Game over, drawn position';
      }

      // game still on
      else {
        status = moveColor + ' to move';

        // check?
        if (game.in_check() === true) {
          status += ', ' + moveColor + ' is in check';
        }
      }

      console.log(status);
      console.log(game.fen());
      console.log(game.pgn());
    };

});

$("castle-btn").on('click', function(){
	$.get('https://chess-brain.herokuapp.com/home', function(data){
    window.location = 'https://chess-brain.herokuapp.com/home';
  });
});

$("logout-btn").on('click', function(){
	//destroy session then redirect to start page
	$.get('https://chess-brain.herokuapp.com', function(data){
    window.location = 'https://chess-brain.herokuapp.com';
  });

});

$("offerdraw-btn").on('click', function(){

});

$("resign-btn").on('click', function(){

});

</script>