<script src="/js/chess.js"></script>

<!-- Draw Modal -->
<div class="modal fade" id="drawModal" role="dialog">
	<div class="modal-dialog">
	<!-- Modal content-->
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal">&times;</button>
				<h4 class="modal-title">!!! DRAW !!!</h4>
			</div>
			<div class="modal-body">
				<p>Your opponent is offering a draw.</p>
			</div>
			<div class="modal-footer">
				<button id="draw-accept-btn" type="button" class="btn btn-default" data-dismiss="modal">Accept</button>
				<button id="draw-reject-btn" type="button" class="btn btn-default" data-dismiss="modal">Reject</button>
			</div>
		</div>  
	</div>
</div>
<!-- Draw Modal ends -->

<div class="container-fluid">
	<div class="row" style="height: 100%">
		<div style="background-color: rgba(40, 50, 78);height: 100%;" class="col-md-1">
			<ul id="sidebar-ul">
				<li id="sidebar-li-app" class="sidebar-li">
				<img src="https://lichess1.org/assets/images/learn/brutal-helm.svg">
				CB
				</li>
				<li id="castle-btn" class="sidebar-li"><img src="https://lichess1.org/assets/images/learn/castle.svg">
					Castle
				</li>
				<!-- <li id="creategame-btn" class="sidebar-li"><img src="https://lichess1.org/assets/images/learn/battle-gear.svg">Create
				</li>
				<li id="joingame-btn" class="sidebar-li"><img src="https://lichess1.org/assets/images/learn/guards.svg">Join</li> -->
				<li id="logout-btn" class="sidebar-li"><img src="https://lichess1.org/assets/images/learn/winged-sword.svg">Logout</li>
			</ul>
		</div>
		<div id="chessboard-div" class="col-md-7">
			<div style="height: 100%" class="row">
				<div class="col-md-9">
					<div id="board1">
            		</div>
				</div>
				<div id="timer" class="col-md-3">
					<ul>
						<li>

							<span id="opponent-name">Magnus</span>
							<br>
							<span class="label label-info">`
								<i class="fa fa-clock-o" aria-hidden="true"></i>
								05:00
							</span>
						</li>
						<li id="offerdraw-btn" style="margin-bottom: 10px">
							<span class="label label-warning">
							<i class="fa fa-handshake-o" aria-hidden="true"></i>
							Offer Draw
							</span><br>
							<!-- <img src="img/clock.png" height="128px" width="128px"/> -->
							<!-- <img height="128px" width="128px" src="https://lichess1.org/assets/images/learn/spinning-blades.svg"> -->
						</li>
						<li id="resign-btn">
							<span class="label label-danger">
							<i class="fa fa-ravelry" aria-hidden="true"></i>
							Resign
							</span><br>
						</li>
						<li style="padding-bottom: 0">
							<span class="label label-info">
								<i class="fa fa-clock-o" aria-hidden="true"></i>
								04:59
							</span>
							<br>
							<span id="player-name">
								{{userDetails.username}}
							</span>
						</li>
					</ul>
				</div>
			</div>
            
		</div>
		<div id="chessWrapper" class="col-md-4">
			<div id="profile-header" class="row">
		<!-- 	<div class="col-md-1">
			</div> -->

			<div id="heading" class="col-md-12">
				<i  class="fa fa-toggle-off fa" aria-hidden="true"></i>
				PROFILE
			</div>
		</div>

		<div id="profile-info" class="row">
			<div class="col-md-12">
				<div id="profile-info-overlay" class="row">
					<div class="col-md-12">
						<div id="profile-pic-wrapper" class="row">
							<div class="col-md-12">
								<img id="user-pic" class="img-circle" src="/img/crown(2).png">
							</div>
						</div>
						<div id="user-name-wrapper" class="row">
							<div class="col-md-12">
								<span id="user-name">
									{{userDetails.username}}
								</h2>
							</div>
						</div>
						<div id="user-category-wrapper" class="row">
							<div class="col-md-12">
								<button class="btn rounded-circle">
									1st Category
								</button>
							</div>
						</div>
						<div id="total-games-wrapper" class="row">
							<div class="col-md-12">
								<h4>
									{{userGameDetails.totalGames}} GAMES
								</h2>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div id="profile-mini-stats" class="row">
			<div class="col-md-4">
				<span style="font-family: sans-serif;font-weight: bold;color: #FE7C60;"> WON</span> 
				{{userGameDetails.wins}}
			</div>
			<div class="col-md-4">
				<span style="font-family: sans-serif;font-weight: bold;color: #F8C82D;">LOST</span> 
				{{userGameDetails.losses}}
			</div>
			<div class="col-md-4">
				<span style="font-family: sans-serif;font-weight: bold;color: #0DCCC0;">DRAW</span>
				 {{userGameDetails.draws}}
			</div>
		</div>

		<div id="chat-div" class="row">
		</div>
		</div>
	</div>
</div>
<script src="/socket.io/socket.io.js"></script>
<script src="/js/chessboard-0.3.0.js"></script>
<script src="/js/timer.js"></script>
<script type="text/javascript">

// board defaults to the starting position when called with no parameters
var game = new Chess();
var gameTurn = "white"; // initially it would be white's turn to play
var chessTimer = new Timer();
var chessTime = 5 * 60 ; //5 minutes
var unique_key = "{{id}}";
var currplayer = "{{playas}}";
var nextplayer;
var gameResult;
var socket = io();	//this will trigger io.on('connection', function(socket) -> check it

/*
	onDragStart
	1. Fires when a piece is picked up.
	2. The drag action is prevented if the function returns false.
	3. the function disables picking up pieces if the game is over
	4. only pick up pieces for the side to move
*/
var onDragStart = function(source, piece, position, orientation) {
  if (game.game_over() === true ||
      (game.turn() === 'w' && piece.search(/^b/) !== -1) ||
      (game.turn() === 'b' && piece.search(/^w/) !== -1)) {
    return false;
  }
};

/*
	onDrop
	1. Fires when a piece is dropped.
	2. the function returns snapback when its opponent's turn
	3. the function triggers 'sendmove' and 'triggerPassChance' if it is player's turn
	game.move() is a chess.js function (no UI changes)
	board.move() is a chessboard.js function (UI changes)
*/
var onDrop = function(source, target) 
{
	console.log('gameTurn: '+ gameTurn + " " + "currplayer: " + currplayer);
	if(gameTurn == currplayer)	//initially it would allow white, then alternate
	{
		var move = game.move({
			from: source,
			to: target,
			promotion: 'q' // NOTE: always promote to a queen for example simplicity
		});

		if (move === null) return 'snapback'; // illegal move
		socket.emit('sendmove',source, target, unique_key);
		currplayer == 'white' ? (nextplayer = 'black') : (nextplayer = 'white');
		socket.emit('triggerPassChance', nextplayer, unique_key);	//handshake starts from client
	}
	else
		return 'snapback';
};

// update the board position after the piece snap 
// for castling, en passant, pawn promotion
var onSnapEnd = function() 
{
	board.position(game.fen());
};

//it has to be placed below onDrop and onSnapEnd since they are function expressions
var cfg = { //initial configuration for board
  orientation: currplayer,
  draggable: true,
  position: 'start',
  onDragStart: onDragStart,
  onDrop: onDrop,
  onSnapEnd: onSnapEnd
};
board = ChessBoard('board1', cfg); //initializing ChessBoard

socket.on('connect',function(){
  console.log('client successfully connected index');
  if(currplayer == "white")
  {
	chessTimer.start(chessTime);
	socket.emit('create', unique_key, "swapnil");
  } 
  else
  {
    socket.emit('join', unique_key, "magnus");
  }
});


socket.on('updatePlayersInfo', function(playerBlack, playerWhite){
	if(currplayer == 'white')
	{
		$("#player-name").text(playerWhite);
		$("#opponent-name").text(playerBlack);
	}
	else
	{
		$("#player-name").text(playerBlack);
		$("#opponent-name").text(playerWhite);
	}
  
});
//pass chance acknowledgment recieved (client side ack of syn->ack)
socket.on('ackPassChance', function(currplayer){
  gameTurn = currplayer;	//overshadows global currplayer
});

//update board UI (that is why using board.move() instead of game.move())
socket.on('updateboard',function(source, target)
{
	board.move(source + '-' + target);	//for chessboard.js  
	game.move({
		from: source,
		to: target,
		promotion: 'q' // NOTE: always promote to a queen for example simplicity
	});
	updateStatus();	//handle draw | checkmate| check | game still on
});


socket.on('offerdraw-server-ack', function(unique_key, playerWhoIsOffering){
	if(currplayer != playerWhoIsOffering)
	{
		//open a modal and ask for approval, then update database if accepted draw
		$("#drawModal").modal();
	}
});

socket.on('offerresign-server-ack', function(unique_key, playerWhoIsOffering){
	if(currplayer != playerWhoIsOffering)
	{
		//add to database won
		console.log("you won");
	}
	else
	{
		console.log("you lost");
		//add to database lost
	}
});

$("#castle-btn").on('click', function(){
	$.get('https://chess-brain.herokuapp.com/home', function(data){
    window.location = 'https://chess-brain.herokuapp.com/home';
  });
});

$("#logout-btn").on('click', function(){
	//destroy session then redirect to start page
	$.get('https://chess-brain.herokuapp.com', function(data){
    window.location = 'https://chess-brain.herokuapp.com';
  });

});

$("#offerdraw-btn").on('click', function(){
	socket.emit('offerdraw-client-syn', unique_key, currplayer);//currplayer = player who is offering draw
});

$("#resign-btn").on('click', function(){
	socket.emit('offerresign-client-syn', unique_key, currplayer);	//currplayer = player who is resigning
});

//acknowledgment recieved for offer-draw
$("#draw-accept-btn").on('click', function(){
	//add one draw to both players database 
	//redirect to castle (user's home)
	gameResult = {
		'resultCode' : 1,	//0 : draw, 1 : win/lose
		'winner' : "swapnil",
		'loser' : "magnus"
	};
	$.post( "https://chess-brain.herokuapp.com/gameResult", { result : gameResult }).done(function(data)
	{
		//game ended go home
	    $.get('https://chess-brain.herokuapp.com/home', function(data){
		    window.location = 'https://chess-brain.herokuapp.com/home';
		});
	});
});

$("#draw-reject-btn").on('click', function(){
	//do nothing
});

function updateStatus() 
{
  var status = '';

  var moveColor = 'White';
  if (game.turn() === 'b') {
    moveColor = 'Black';
  }

  // checkmate?
  if (game.in_checkmate() === true) {
    status = 'Game over, ' + moveColor + ' is in checkmate.';
  }

  // draw?
  else if (game.in_draw() === true) {
    status = 'Game over, drawn position';
  }

  // game still on
  else {
    status = moveColor + ' to move';

    // check?
    if (game.in_check() === true) {
      status += ', ' + moveColor + ' is in check';
    }
  }

  console.log(status);
  console.log(game.fen());
  console.log(game.pgn());
}

</script>